using System;
using System.Collections.Generic;

namespace DumplingPuff.DataAccess.Repository
{
    /// <summary>
    /// Defines generic methods for interacting with the database.
    /// </summary>
    /// <typeparam name="T">
    ///     A model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
    ///     Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
    ///     Private key vaules within the model will be updated after insertion.
    /// </typeparam>
    public interface IRepository<T>
    {
        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// If record exists, updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGenera
        /// </summary>
        /// <param name="model">Model to insert or update.</param>
        void AddOrUpdate(T model);

        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// If record(s) exists, updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGenera
        /// </summary>
        /// <param name="models">Models to insert or update.</param>
        void AddOrUpdate(IEnumerable<T> models);

        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// Private key vaules within the model will be updated after insertion.
        /// </summary>
        /// <param name="model">Model to insert.</param>
        void Insert(T model);

        /// <summary>
        /// Insert a list of models into the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// Private key vaules within the model will be updated after insertion.
        /// </summary>
        /// <param name="models">Models to insert.</param>
        void Insert(IEnumerable<T> models);

        /// <summary>
        /// Updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// </summary>
        /// <param name="model">The model to be updated.</param>
        void Update(T model);

        /// <summary>
        /// Updates the provided list of models. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// </summary>
        /// <param name="models">The models to update.</param>
        void Update(IEnumerable<T> models);

        /// <summary>
        /// Deletes a given model from the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="model">The model to delete.</param>
        void Delete(T model);

        /// <summary>
        /// Deletes the given models from the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="models">The models to delete.</param>
        void Delete(IEnumerable<T> models);

        /// <summary>
        /// Retrieve the data for an object with matching keys. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="modelWithId">A model with key fields populated to retrieve from the database.</param>
        /// <returns>A model matching the supplied key fields.</returns>
        T Get(T modelWithId);

        /// <summary>
        /// Retrieves all data from the database for the table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <returns>All models from the database.</returns>
        IEnumerable<T> GetAll();
    }
}
