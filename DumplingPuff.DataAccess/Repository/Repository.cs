using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using DumplingPuff.DataAccess.Connection;
using Dapper.FastCrud;

namespace DumplingPuff.DataAccess.Repository
{
    /// <summary>
    /// Defines generic methods for interacting with the database.
    /// </summary>
    /// <typeparam name="T">
    ///     A model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
    ///     Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
    ///     Private key vaules within the model will be updated after insertion.
    /// </typeparam>
    public class Repository<T> : IRepository<T>, IDisposable
    {
        protected readonly IDbConnection Database;

        /// <summary>
        /// Initializes a new instance of the <see cref="Repository{T}"/> class.
        /// </summary>
        /// <param name="connectionFactory">The connection factory.</param>
        public Repository(IConnectionFactory connectionFactory)
        {
            OrmConfiguration.DefaultDialect = SqlDialect.MsSql;
            Database = connectionFactory.CreatePortalConnection();
        }

        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// If record exists, updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGenera
        /// </summary>
        /// <param name="model">Model to insert or update.</param>
        public void AddOrUpdate(T model)
        {
            CheckNullArgument(model);

            var exists = Get(model);
            if (exists == null)
            {
                Insert(model);
            }
            else
            {
                Update(model);
            }
        }

        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// If record(s) exists, updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGenera
        /// </summary>
        /// <param name="models">Models to insert or update.</param>
        public void AddOrUpdate(IEnumerable<T> models)
        {
            CheckNullArgument(models);

            // Utilizing ToList to make sure the received models have their calculated values updated appropriately.
            var modelList = models.ToList();
            foreach (var model in modelList)
            {
                AddOrUpdate(model);
            }
        }

        /// <summary>
        /// Insert data into a table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// Private key vaules within the model will be updated after insertion.
        /// </summary>
        /// <param name="model">Model to insert.</param>
        public void Insert(T model)
        {
            CheckNullArgument(model);

            Database.Insert<T>(model);
        }

        /// <summary>
        /// Insert a list of models into the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// Private key vaules within the model will be updated after insertion.
        /// </summary>
        /// <param name="models">Models to insert.</param>
        public void Insert(IEnumerable<T> models)
        {
            CheckNullArgument(models);

            // Utilizing ToList to make sure the received models have their calculated values updated appropriately.
            var modelList = models.ToList();
            foreach (var model in modelList)
            {
                Insert(model);
            }
        }

        /// <summary>
        /// Updates a database table based on the supplied model. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// </summary>
        /// <param name="model">The model to be updated.</param>
        public void Update(T model)
        {
            CheckNullArgument(model);

            Database.Update<T>(model);
        }

        /// <summary>
        /// Updates the provided list of models. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag and fields which will be generated by the database should be marked with 'DatabaseGenerated(DatabaseGeneratedOption.Computed)'.
        /// </summary>
        /// <param name="models">The models to update.</param>
        public void Update(IEnumerable<T> models)
        {
            CheckNullArgument(models);

            // Utilizing ToList to make sure the received models have their calculated values updated appropriately.
            var modelList = models.ToList();
            foreach (var model in modelList)
            {
                Update(model);
            }
        }

        /// <summary>
        /// Deletes a given model from the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="model">The model to delete.</param>
        public void Delete(T model)
        {
            CheckNullArgument(model);

            Database.Delete<T>(model);
        }

        /// <summary>
        /// Deletes the given models from the database. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="models">The models to delete.</param>
        public void Delete(IEnumerable<T> models)
        {
            CheckNullArgument(models);

            foreach (var model in models)
            {
                Delete(model);
            }
        }

        /// <summary>
        /// Retrieve the data for an object with matching keys. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <param name="modelWithId">A model with key fields populated to retrieve from the database.</param>
        /// <returns>A model matching the supplied key fields.</returns>
        public T Get(T modelWithId)
        {
            CheckNullArgument(modelWithId);

            return Database.Get(modelWithId);
        }

        /// <summary>
        /// Retrieves all data from the database for the table. We infer the table name to be the same as the model unless the [Table("TableName")] class attribute is applied.
        /// Private keys should be marked with the [Key] attribute tag.
        /// </summary>
        /// <returns>All models from the database.</returns>
        public IEnumerable<T> GetAll()
        {
            return Database.Find<T>();
        }

        /// <summary>
        /// Checks for null argument.
        /// </summary>
        /// <param name="model">The model.</param>
        /// <exception cref="Exception">model</exception>
        public void CheckNullArgument(object model)
        {
            if (model == null)
            {
                throw new Exception($"{nameof(model)} is null.");
            }
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            Database.Dispose();
        }
    }
}
